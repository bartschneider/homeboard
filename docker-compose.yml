# E-Paper Dashboard Docker Compose Configuration
# Production-ready setup for localhost preview and deployment

version: '3.8'

services:
  # Main dashboard application
  homeboard:
    image: homeboard-enhanced:latest
    container_name: homeboard-app
    ports:
      - "8080:8080"
    environment:
      - CONFIG_PATH=/app/config.json
      - PYTHONPATH=/app/widgets
      - TZ=UTC
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DATABASE_PATH=/app/data/homeboard.db
      - ADK_SERVICE_URL=http://adk-service:8081
    volumes:
      # Configuration persistence
      - ./config.json:/app/config.json:ro
      - ./config-extended.json:/app/config-extended.json:ro
      
      # Widget persistence (for custom widgets)
      - ./widgets:/app/widgets:ro
      
      # Data persistence
      - homeboard-data:/app/data
      - homeboard-logs:/app/logs
      - homeboard-backups:/app/backups
      
      # Timezone data
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - adk-service
    restart: unless-stopped
    networks:
      - homeboard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homeboard.rule=Host(`dashboard.localhost`)"
      - "traefik.http.services.homeboard.loadbalancer.server.port=8080"

  # Java ADK Service
  adk-service:
    build:
      context: ./adk_service_java
      dockerfile: Dockerfile
    container_name: homeboard-adk
    ports:
      - "8081:8081"
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GOOGLE_CLOUD_PROJECT_ID=${GOOGLE_CLOUD_PROJECT_ID:-}
      - GOOGLE_CLOUD_LOCATION=${GOOGLE_CLOUD_LOCATION:-us-central1}
      - VERTEX_AI_PROJECT_ID=${VERTEX_AI_PROJECT_ID:-}
      - VERTEX_AI_LOCATION=${VERTEX_AI_LOCATION:-us-central1}
      - SPRING_PROFILES_ACTIVE=docker
    restart: unless-stopped
    networks:
      - homeboard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/adk/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adk.rule=Host(`adk.localhost`)"
      - "traefik.http.services.adk.loadbalancer.server.port=8081"

  # Nginx reverse proxy for production-like setup
  nginx:
    image: nginx:alpine
    container_name: homeboard-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    depends_on:
      - homeboard
    restart: unless-stopped
    networks:
      - homeboard-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management (optional)
  redis:
    image: redis:alpine
    container_name: homeboard-redis
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD:-defaultpassword123}"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - homeboard-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - full-stack

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: homeboard-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - homeboard-network
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: homeboard-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - homeboard-network
    profiles:
      - monitoring

# Named volumes for data persistence
volumes:
  homeboard-data:
    driver: local
  homeboard-logs:
    driver: local
  homeboard-backups:
    driver: local
  nginx-cache:
    driver: local
  nginx-logs:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Custom network for service communication
networks:
  homeboard-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16