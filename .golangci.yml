# GolangCI-Lint Configuration for E-Paper Dashboard
# Comprehensive linting configuration with strict quality standards

run:
  timeout: 5m
  tests: true
  modules-download-mode: readonly
  allow-parallel-runners: true

linters-settings:
  cyclop:
    max-complexity: 15
    package-average: 10.0
    skip-tests: false

  dupl:
    threshold: 100

  errcheck:
    check-type-assertions: true
    check-blank: true
    exclude-functions:
      - io/ioutil.ReadFile
      - io.Copy(*bytes.Buffer)
      - io.Copy(os.Stdout)

  funlen:
    lines: 100
    statements: 50

  gci:
    sections:
      - standard
      - default
      - prefix(github.com/bartosz/homeboard)
    skip-generated: true
    custom-order: true

  gocognit:
    min-complexity: 15

  goconst:
    min-len: 2
    min-occurrences: 3
    ignore-tests: false
    match-constant: true
    numbers: false
    min: 3
    max: 3

  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral
      - whyNoLint

  gocyclo:
    min-complexity: 15

  godot:
    scope: declarations
    exclude:
      - "^fixme:"
      - "^todo:"
    period: true
    capital: false

  gofmt:
    simplify: true

  goimports:
    local-prefixes: github.com/bartosz/homeboard

  gomnd:
    checks:
      - argument
      - case
      - condition
      - operation
      - return
      - assign
    ignored-numbers:
      - '0'
      - '1'
      - '2'
      - '3'
      - '8'
      - '10'
      - '16'
      - '24'
      - '32'
      - '60'
      - '64'
      - '100'
      - '1000'
      - '1024'
    ignored-functions:
      - strings.SplitN
      - bytes.SplitN
      - acceptedHosts.Contains
      - math.Pow
      - make

  gomodguard:
    allowed:
      modules:
        - github.com/gorilla/mux
        - github.com/gorilla/websocket
    blocked:
      modules:
        - github.com/uudashr/go-module:
            recommendations:
              - golang.org/x/mod

  govet:
    check-shadowing: true
    settings:
      printf:
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

  lll:
    line-length: 120

  misspell:
    locale: US

  nakedret:
    max-func-lines: 30

  nestif:
    min-complexity: 4

  nolintlint:
    allow-leading-space: true
    allow-unused: false
    require-explanation: false
    require-specific: false

  prealloc:
    simple: true
    range-loops: true
    for-loops: false

  predeclared:
    ignore: ""
    q: false

  revive:
    min-confidence: 0
    rules:
      - name: atomic
      - name: line-length-limit
        severity: error
        arguments: [120]
      - name: unhandled-error
        arguments:
          - "fmt.Printf"
          - "fmt.Println"
          - "fmt.Print"

  staticcheck:
    checks: ["all"]

  stylecheck:
    checks: ["all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022"]
    dot-import-whitelist:
      - fmt

  tagliatelle:
    case:
      rules:
        json: camel
        yaml: camel
        xml: camel
        bson: camel
        avro: snake
        mapstructure: kebab

  tenv:
    all: false

  testpackage:
    skip-regexp: (export|internal)_test\.go

  unparam:
    check-exported: false

  unused:
    check-exported: false

  whitespace:
    multi-if: false
    multi-func: false

  wrapcheck:
    ignoreSigs:
      - .Errorf(
      - errors.New(
      - errors.Unwrap(
      - .Wrap(
      - .Wrapf(

  wsl:
    strict-append: true
    allow-assign-and-call: true
    allow-multiline-assign: true
    allow-cuddle-declarations: false
    allow-trailing-comment: false
    force-case-trailing-whitespace: 0
    force-err-cuddling: false
    allow-separated-leading-comment: false

linters:
  disable-all: true
  enable:
    # Bug detection
    - errcheck
    - gosimple
    - govet
    - ineffassign
    - staticcheck
    - typecheck
    - unused
    
    # Style and formatting
    - gofmt
    - goimports
    - gci
    - whitespace
    - wsl
    
    # Code quality
    - cyclop
    - dupl
    - funlen
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - gomnd
    - nestif
    - prealloc
    - unconvert
    - unparam
    
    # Documentation and naming
    - godot
    - misspell
    - stylecheck
    - revive
    
    # Security
    - gosec
    - gomodguard
    
    # Testing
    - testpackage
    - tenv
    
    # Best practices
    - nakedret
    - nolintlint
    - predeclared
    - tagliatelle
    - wrapcheck

issues:
  exclude-rules:
    # Exclude some linters from running on tests files
    - path: _test\.go
      linters:
        - gomnd
        - funlen
        - goconst
        - wrapcheck
        - dupl

    # Exclude known linter issues
    - path: internal/widgets/
      text: "cyclomatic complexity"
      linters:
        - gocyclo
        - cyclop
        - gocognit

    # Exclude shadow checking in type switches
    - text: "shadow: declaration of \"err\""
      linters:
        - govet

    # Exclude lll issues for long variable names
    - text: "Line contains TODO/BUG/FIXME:"
      linters:
        - godot

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  exclude-use-default: false

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed
  new-from-rev: HEAD~

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

severity:
  default-severity: error
  case-sensitive: false

# Output configuration options
output:
  format: colored-line-number
  print-issued-lines: true
  print-linter-name: true
  uniq-by-line: true
  sort-results: true